{
  parserClass="com.github.firsttimeinforever.mermaid.lang.parser._MermaidParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Mermaid"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.firsttimeinforever.mermaid.lang.psi"
  psiImplPackage="com.github.firsttimeinforever.mermaid.lang.psi.impl"
  elementTypeHolderClass="com.github.firsttimeinforever.mermaid.lang.parser.MermaidElements"
  elementTypeClass="com.github.firsttimeinforever.mermaid.lang.psi.MermaidElementType"
  tokenTypeClass="com.github.firsttimeinforever.mermaid.lang.lexer.MermaidToken"
  parserImports=[
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Pie.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Journey.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Flowchart.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Sequence.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.ClassDiagram.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.StateDiagram.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.EntityRelationship.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Gantt.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Requirement.*'
  ]
  generateTokens=false
}

file ::= start
private start ::= EOL start | directive start | diagram

private diagram ::= pieHeader pieDocument
	| JOURNEY journeyDocument
	| flowchartHeader flowchartDocument
	| SEQUENCE sequenceDocument
	| CLASS_DIAGRAM classDocument
	| STATE_DIAGRAM stateDocument
	| ENTITY_RELATIONSHIP erDocument
	| GANTT ganttDocument
	| REQUIREMENT_DIAGRAM requirementDocument

pieHeader ::= PIE [showDataRec]
private showDataRec ::= EOL showDataRec | SHOW_DATA


pieDocument ::= pieLines
private pieLines ::= pieLine [pieLines]
pieLine ::= pieStatement [EOL] | EOL
private pieStatement ::= string COLON VALUE
	| TITLE TITLE_VALUE
	| directive


journeyDocument ::= journeyLines
private journeyLines ::= (journeyLine | IGNORED) [journeyLines]
journeyLine ::= journeyStatement [EOL] | EOL
private journeyStatement ::= TASK_NAME COLON (IGNORED | TASK_DATA (COLON TASK_DATA)+)
	| SECTION SECTION_TITLE
	| TITLE TITLE_VALUE
	| directive


flowchartHeader ::= FLOWCHART [DIR]

flowchartDocument ::= flowchartLines
private flowchartLines ::= (flowchartLine | IGNORED) [flowchartLines]
flowchartLine ::= flowchartStatement [separator] | separator
private flowchartStatement ::= vertexStatement (separator vertexStatement)*
	| subgraphStatement
	| styleStatement
	| linkStyleStatement
	| classDefStatement
	| flowchartClassStatement
//	| directive

private separator ::= EOL | SEMICOLON
vertexStatement ::= nodeStatement [flowchartLinkStatement vertexStatement]
flowchartLinkStatement ::= START_ARROW LINK_TEXT ARROW | ARROW [SEP LINK_TEXT SEP]
nodeStatement ::= vertex STYLE_SEPARATOR STYLE_TARGET | vertex [AMPERSAND nodeStatement]
vertex ::= complexIdentifier [vertexText]
vertexText ::= OPEN_SQUARE ALIAS CLOSE_SQUARE
							| OPEN_ROUND ALIAS CLOSE_ROUND
							| STADIUM_START ALIAS STADIUM_END
							| SUBROUTINE_START ALIAS SUBROUTINE_END
							| CYLINDER_START ALIAS CYLINDER_END
							| CIRCLE_START ALIAS CIRCLE_END
							| ASYMMETRIC_START ALIAS CLOSE_SQUARE
							| DIAMOND_START ALIAS DIAMOND_END
							| HEXAGON_START ALIAS HEXAGON_END
							| TRAP_START ALIAS INV_TRAP_END
              | INV_TRAP_START ALIAS TRAP_END
							| TRAP_START ALIAS TRAP_END
							| INV_TRAP_START ALIAS INV_TRAP_END
							| DOUBLE_CIRCLE_START ALIAS DOUBLE_CIRCLE_END

subgraphStatement ::= SUBGRAPH complexIdentifier separator (DIRECTION DIR separator | flowchartDocument)* END

styleStatement ::= STYLE STYLE_TARGET styleOptions

linkStyleStatement ::= LINK_STYLE linkStyleTarget styleOptions
private linkStyleTarget ::= STYLE_TARGET (COMMA STYLE_TARGET)* | DEFAULT

classDefStatement ::= CLASS_DEF (STYLE_TARGET | DEFAULT) styleOptions

flowchartClassStatement ::= CLASS ID (COMMA ID)* STYLE_TARGET

styleOptions ::= STYLE_OPT COLON STYLE_VAL (COMMA  STYLE_OPT COLON STYLE_VAL)*


sequenceDocument ::= sequenceLines
private sequenceLines ::= (sequenceLine | IGNORED) [sequenceLines]
sequenceLine ::= sequenceStatement [separator] | separator
private sequenceStatement ::= (PARTICIPANT | ACTOR) complexIdentifier [AS idAlias]
	| signalStatement
	| AUTONUMBER
	| ACTIVATE complexIdentifier
	| DEACTIVATE complexIdentifier
	| noteStatement
	| linksStatement
	| linkStatement
	| LOOP [MESSAGE] sequenceDocument END
	| RECT [MESSAGE] sequenceDocument END
	| OPT [MESSAGE] sequenceDocument END
	| ALT [MESSAGE] elseSections END
	| PAR [MESSAGE] parSections END
	| directive

idAlias ::= ALIAS+

signalStatement ::= complexIdentifier signalType [PLUS | MINUS] complexIdentifier COLON MESSAGE
signalType ::= SOLID_OPEN_ARROW
  | DOTTED_OPEN_ARROW
  | SOLID_ARROW
  | DOTTED_ARROW
  | SOLID_CROSS
  | DOTTED_CROSS
  | SOLID_POINT
  | DOTTED_POINT

noteStatement ::= NOTE (RIGHT_OF | LEFT_OF) complexIdentifier COLON MESSAGE
	| NOTE OVER complexIdentifier [COMMA complexIdentifier] COLON MESSAGE

linksStatement ::= LINKS complexIdentifier COLON linksValues
linksValues ::= OPEN_CURLY linkContent CLOSE_CURLY
private linkContent ::= string COLON string [COMMA linkContent]

linkStatement ::= LINK complexIdentifier MESSAGE

elseSections ::= sequenceDocument [ELSE [MESSAGE] elseSections]
parSections ::= sequenceDocument [AND [MESSAGE] parSections]


classDocument ::= classLines
private classLines ::= classLine [classLines]
classLine ::= classDiagramStatement [EOL] | EOL
private classDiagramStatement ::= DIRECTION DIR
  | classStatement
  | relationStatement
  | memberStatement
  | annotationStatement
	| directive

classStatement ::= CLASS identifier [TILDA GENERIC_TYPE TILDA] [STYLE_SEPARATOR identifier] [OPEN_CURLY members CLOSE_CURLY]

memberStatement ::= identifier COLON attrOrMethod

relationStatement ::= identifier relation identifier [COLON LABEL]

annotationStatement ::= annotation identifier
annotation ::= ANNOTATION_START ANNOTATION_VALUE ANNOTATION_END

private members ::= memberLine [members]
memberLine ::= (attrOrMethod | annotation | directive) [EOL] | EOL
attrOrMethod ::= [visibilityAtStart] (method | attribute)
visibilityAtStart ::= PLUS | MINUS | POUND | TILDA
visibilityAtEnd ::= STAR | DOLLAR

attribute ::= (attrTypeWithGeneric | attrType) attrName [visibilityAtEnd] | attrName [COLON (attrTypeWithGeneric | attrType)]
method ::= attrName OPEN_ROUND [attribute] CLOSE_ROUND [visibilityAtEnd] [attrTypeWithGeneric | attrType]
attrType ::= ID
attrTypeWithGeneric ::= attrType TILDA GENERIC_TYPE TILDA
attrName ::= ID


relation ::= [cardinality] [relationTypeLeft] lineType [relationTypeRight] [cardinality]
cardinality ::= string

relationTypeLeft ::= AGGREGATION
    | EXTENSION_START
    | COMPOSITION
    | DEPENDENCY_START

relationTypeRight ::= AGGREGATION
    | EXTENSION_END
    | COMPOSITION
    | DEPENDENCY_END

lineType ::= LINE | DOTTED_LINE


stateDocument ::= stateLines
private stateLines ::= stateLine [stateLines]
stateLine ::= stateDiagramStatement [EOL] | EOL
private stateDiagramStatement ::= stateId [ COLON LABEL | ARROW stateId [COLON LABEL] ]
  | STATE description AS stateId
  | STATE stateId OPEN_CURLY innerStateDocument CLOSE_CURLY
  | STATE stateId ANNOTATION_START ANNOTATION_VALUE ANNOTATION_END
  | NOTE (RIGHT_OF | LEFT_OF) stateId noteContent
  | MINUS MINUS
  | DIRECTION DIR
	| directive

innerStateDocument ::= innerStateLines
private innerStateLines ::= innerStateLine [innerStateLines]
innerStateLine ::= innerStateDiagramStatement [EOL] | EOL
private innerStateDiagramStatement ::= stateDiagramStatement | MINUS MINUS

stateId ::= identifier | OPEN_SQUARE STAR CLOSE_SQUARE
description ::= string
private noteContent ::= (EOL NOTE_CONTENT)* [EOL] END
  | COLON [NOTE_CONTENT]


erDocument ::= erLines
private erLines ::= erLine [erLines]
erLine ::= erStatement [EOL] | EOL
private erStatement ::= identifier [entityStatement]
	| directive

private entityStatement ::= relationship identifier COLON (LABEL | string)
  | OPEN_CURLY erAttributesLines CLOSE_CURLY

relationship ::= relationshipLeft (IDENTIFYING | NON_IDENTIFYING) relationshipRight
private relationshipLeft ::= ZERO_OR_ONE_LEFT | ONE_OR_MORE_LEFT | ZERO_OR_MORE_LEFT | ONLY_ONE
private relationshipRight ::= ZERO_OR_ONE_RIGHT | ONE_OR_MORE_RIGHT | ZERO_OR_MORE_RIGHT | ONLY_ONE

private erAttributesLines ::= erAttributeLine [erAttributesLines]
erAttributeLine ::= erAttribute [EOL] | EOL
erAttribute ::= attrType attrName [ATTR_KEY] [string]


ganttDocument ::= ganttLines
private ganttLines ::= ganttLine [ganttLines]
ganttLine ::= ganttStatement [IGNORED] [EOL] | [IGNORED] EOL
private ganttStatement ::= DATE_FORMAT
  | TITLE TITLE_VALUE
  | EXCLUDES
  | INCLUDES
  | AXIS_FORMAT
  | SECTION SECTION_TITLE
  | TASK_NAME COLON TASK_DATA (COMMA TASK_DATA)*
	| directive


requirementDocument ::= requirementLines
private requirementLines ::= requirementLine [requirementLines]
requirementLine ::= requirementStatement [EOL] | EOL
private requirementStatement ::= requirementDef
  | elementDef
  | relationshipDef
	| directive

requirementDef ::= requirementType identifier OPEN_CURLY requirementBody CLOSE_CURLY
requirementType ::= REQUIREMENT
  | FUNCTIONAL_REQUIREMENT
  | INTERFACE_REQUIREMENT
  | PERFORMANCE_REQUIREMENT
  | PHYSICAL_REQUIREMENT
  | DESIGN_CONSTRAINT
private requirementValue ::= LABEL | string

requirementBody ::= requirementBodyLines
private requirementBodyLines ::= requirementBodyLine [requirementBodyLines]
requirementBodyLine ::= requirementBodyStatement [EOL] | EOL
private requirementBodyStatement ::= ID_KEYWORD COLON requirementValue
  | TEXT COLON requirementValue
  | RISK COLON riskLevel
  | VERIFY_METHOD COLON verifyType

riskLevel ::= LOW | MEDIUM | HIGH
verifyType ::= ANALYSIS | DEMONSTRATION | INSPECTION | TEST

elementDef ::= ELEMENT identifier OPEN_CURLY elementBody CLOSE_CURLY

elementBody ::= elementBodyLines
private elementBodyLines ::= elementBodyLine [elementBodyLines]
elementBodyLine ::= elementBodyStatement [EOL] | EOL
private elementBodyStatement ::= TYPE COLON requirementValue
  | DOCREF COLON requirementValue

relationshipDef ::= identifier ARROW_LEFT reqRelationship REQ_LINE identifier
  | identifier REQ_LINE reqRelationship ARROW_RIGHT identifier

reqRelationship ::= CONTAINS | COPIES | DERIVES | SATISFIES | VERIFIES | REFINES | TRACES

directive ::= OPEN_DIRECTIVE directiveContent? CLOSE_DIRECTIVE
private directiveContent ::= property [COMMA directiveContent]
property ::= directiveKey COLON directiveValue
directiveKey ::= string | DIRECTIVE_TEXT
directiveValue ::= string | DIRECTIVE_TEXT | object
object ::= OPEN_CURLY directiveContent CLOSE_CURLY

string ::= DOUBLE_QUOTE STRING_VALUE? DOUBLE_QUOTE
complexIdentifier ::= ID+ {
	mixin="com.github.firsttimeinforever.mermaid.lang.psi.impl.MermaidNamedPsiElement"
	implements="com.github.firsttimeinforever.mermaid.lang.psi.MermaidNamedElement"
}
identifier ::= ID {
	mixin="com.github.firsttimeinforever.mermaid.lang.psi.impl.MermaidNamedPsiElement"
	implements="com.github.firsttimeinforever.mermaid.lang.psi.MermaidNamedElement"
}

