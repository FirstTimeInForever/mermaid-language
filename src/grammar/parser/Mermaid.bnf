{
  parserClass="com.github.firsttimeinforever.mermaid.lang.parser._MermaidParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Mermaid"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.firsttimeinforever.mermaid.lang.psi"
  psiImplPackage="com.github.firsttimeinforever.mermaid.lang.psi.impl"
  elementTypeHolderClass="com.github.firsttimeinforever.mermaid.lang.parser.MermaidElements"
  elementTypeClass="com.github.firsttimeinforever.mermaid.lang.psi.MermaidElementType"
  tokenTypeClass="com.github.firsttimeinforever.mermaid.lang.lexer.MermaidToken"
  parserImports=[
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Pie.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Journey.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Flowchart.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.Sequence.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.ClassDiagram.*'
    'static com.github.firsttimeinforever.mermaid.lang.lexer.MermaidTokens.StateDiagram.*'
  ]
  generateTokens=false
}

file ::= start
private start ::= EOL start | comment start | directive start | diagram

private diagram ::= pieHeader pieDocument
	| JOURNEY journeyDocument
	| flowchartHeader flowchartDocument
	| SEQUENCE sequenceDocument
	| CLASS_DIAGRAM classDocument
	| STATE_DIAGRAM stateDocument

pieHeader ::= PIE [showDataRec]
private showDataRec ::= EOL showDataRec | SHOW_DATA


pieDocument ::= pieLines
private pieLines ::= pieLine [pieLines]
pieLine ::= pieStatement [EOL] | EOL
private pieStatement ::= string COLON VALUE
	| TITLE TITLE_VALUE
	| directive
	| comment


journeyDocument ::= journeyLines
private journeyLines ::= (journeyLine | IGNORED) [journeyLines]
journeyLine ::= journeyStatement [EOL] | EOL
private journeyStatement ::= TASK_NAME COLON (IGNORED | TASK_DATA (COLON TASK_DATA)+)
	| SECTION SECTION_TITLE
	| TITLE TITLE_VALUE
	| directive
	| comment


flowchartHeader ::= FLOWCHART [DIR]

flowchartDocument ::= flowchartLines
private flowchartLines ::= (flowchartLine | IGNORED) [flowchartLines]
flowchartLine ::= flowchartStatement [separator] | separator
private flowchartStatement ::= vertex_statement (separator vertex_statement)*
	| subgraph_statement
	| style_statement
	| link_style_statement
	| class_def_statement
	| class_statement
//	| directive
	| comment

private separator ::= EOL | SEMICOLON
vertex_statement ::= node_statement [link_statement vertex_statement]
link_statement ::= START_ARROW LINK_TEXT ARROW | ARROW [SEP LINK_TEXT SEP]
node_statement ::= vertex STYLE_SEPARATOR STYLE_TARGET | vertex [AMPERSAND node_statement]
vertex ::= identifier [vertex_text]
vertex_text ::= OPEN_SQUARE ALIAS CLOSE_SQUARE
							| OPEN_ROUND ALIAS CLOSE_ROUND
							| STADIUM_START ALIAS STADIUM_END
							| SUBROUTINE_START ALIAS SUBROUTINE_END
							| CYLINDER_START ALIAS CYLINDER_END
							| CIRCLE_START ALIAS CIRCLE_END
							| ASYMMETRIC_START ALIAS CLOSE_SQUARE
							| DIAMOND_START ALIAS DIAMOND_END
							| HEXAGON_START ALIAS HEXAGON_END
							| TRAP_START ALIAS INV_TRAP_END
              | INV_TRAP_START ALIAS TRAP_END
							| TRAP_START ALIAS TRAP_END
							| INV_TRAP_START ALIAS INV_TRAP_END
							| DOUBLE_CIRCLE_START ALIAS DOUBLE_CIRCLE_END

subgraph_statement ::= SUBGRAPH ID separator (DIRECTION DIR separator | flowchartDocument)* END

style_statement ::= STYLE STYLE_TARGET style_options

link_style_statement ::= LINK_STYLE link_style_target style_options
private link_style_target ::= STYLE_TARGET (COMMA STYLE_TARGET)* | DEFAULT

class_def_statement ::= CLASS_DEF (STYLE_TARGET | DEFAULT) style_options

class_statement ::= CLASS ID (COMMA ID)* STYLE_TARGET

style_options ::= STYLE_OPT COLON STYLE_VAL (COMMA  STYLE_OPT COLON STYLE_VAL)*


sequenceDocument ::= sequenceLines
private sequenceLines ::= (sequenceLine | IGNORED) [sequenceLines]
sequenceLine ::= sequenceStatement [separator] | separator
private sequenceStatement ::= (PARTICIPANT | ACTOR) identifier [AS idAlias]
	| signalStatement
	| AUTONUMBER
	| ACTIVATE identifier
	| DEACTIVATE identifier
	| noteStatement
	| linksStatement
	| linkStatement
	| LOOP [MESSAGE] sequenceDocument END
	| RECT [MESSAGE] sequenceDocument END
	| OPT [MESSAGE] sequenceDocument END
	| ALT [MESSAGE] elseSections END
	| PAR [MESSAGE] parSections END
	| directive
  | comment
idAlias ::= ALIAS+

signalStatement ::= identifier signalType [PLUS | MINUS] identifier COLON MESSAGE
signalType ::= SOLID_OPEN_ARROW
  | DOTTED_OPEN_ARROW
  | SOLID_ARROW
  | DOTTED_ARROW
  | SOLID_CROSS
  | DOTTED_CROSS
  | SOLID_POINT
  | DOTTED_POINT

noteStatement ::= NOTE (RIGHT_OF | LEFT_OF) identifier COLON MESSAGE
	| NOTE OVER identifier [COMMA identifier] COLON MESSAGE

linksStatement ::= LINKS identifier COLON linksValues
linksValues ::= OPEN_CURLY linkContent CLOSE_CURLY
private linkContent ::= string COLON string [COMMA linkContent]

linkStatement ::= LINK identifier MESSAGE

elseSections ::= sequenceDocument [ELSE [MESSAGE] elseSections]
parSections ::= sequenceDocument [AND [MESSAGE] parSections]


classDocument ::= classLines
private classLines ::= classLine [classLines]
classLine ::= classDiagramStatement [EOL] | EOL
private classDiagramStatement ::= DIRECTION DIR
  | classStatement
  | relationStatement
  | memberStatement
  | annotationStatement
	| directive
  | comment

classStatement ::= CLASS ID [TILDA GENERIC_TYPE TILDA] [STYLE_SEPARATOR ID] [OPEN_CURLY members CLOSE_CURLY]

memberStatement ::= ID COLON attrOrMethod

relationStatement ::= ID relation ID [COLON LABEL]

annotationStatement ::= annotation ID
annotation ::= ANNOTATION_START ANNOTATION_VALUE ANNOTATION_END

private members ::= memberLine [members]
memberLine ::= (attrOrMethod | annotation | directive | comment) [EOL] | EOL
attrOrMethod ::= [visibilityAtStart] (method | attribute)
visibilityAtStart ::= PLUS | MINUS | POUND | TILDA
visibilityAtEnd ::= STAR | DOLLAR

attribute ::= attrType attrName [visibilityAtEnd] | attrName [COLON attrType]
method ::= attrName OPEN_ROUND [attribute] CLOSE_ROUND [visibilityAtEnd] [attrType]
attrType ::= ID (TILDA GENERIC_TYPE TILDA)?
attrName ::= ID


relation ::= [cardinality] [relationTypeLeft] lineType [relationTypeRight] [cardinality]
cardinality ::= string

relationTypeLeft ::= AGGREGATION
    | EXTENSION_START
    | COMPOSITION
    | DEPENDENCY_START

relationTypeRight ::= AGGREGATION
    | EXTENSION_END
    | COMPOSITION
    | DEPENDENCY_END

lineType ::= LINE | DOTTED_LINE


stateDocument ::= stateLines
private stateLines ::= stateLine [stateLines]
stateLine ::= stateDiagramStatement [EOL] | EOL
private stateDiagramStatement ::= state_id [ COLON LABEL | ARROW state_id [COLON LABEL] ]
  | STATE description AS state_id
  | STATE state_id OPEN_CURLY innerStateDocument CLOSE_CURLY
  | STATE state_id ANNOTATION_START ANNOTATION_VALUE ANNOTATION_END
  | NOTE (RIGHT_OF | LEFT_OF) state_id noteContent
  | MINUS MINUS
  | DIRECTION DIR
	| directive
  | comment

innerStateDocument ::= innerStateLines
private innerStateLines ::= innerStateLine [innerStateLines]
innerStateLine ::= innerStateDiagramStatement [EOL] | EOL
private innerStateDiagramStatement ::= stateDiagramStatement | MINUS MINUS

state_id ::= ID | OPEN_SQUARE STAR CLOSE_SQUARE
description ::= string
private noteContent ::= (EOL NOTE_CONTENT)* [EOL] END
  | COLON [NOTE_CONTENT]

comment ::= LINE_COMMENT [COMMENT_TEXT]

directive ::= OPEN_DIRECTIVE directiveContent CLOSE_DIRECTIVE
private directiveContent ::= property [COMMA directiveContent]
property ::= directiveKey COLON directiveValue
directiveKey ::= string | DIRECTIVE_TEXT
directiveValue ::= string | DIRECTIVE_TEXT | object
object ::= OPEN_CURLY directiveContent CLOSE_CURLY

string ::= DOUBLE_QUOTE STRING_VALUE DOUBLE_QUOTE
identifier ::= ID+
